package org.dataalgorithms.chap08.mapreduce;

import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/**
 * The CommonFriendsMapper class implements the map() function.
 * <p>
 * map(key, value) {
 * // key is the key generated by MapReduce/Hadoop
 * // value is one line of input
 * Let (<person> (<friend_1> <friend_2> ... <friend_N>)) = parse(line);
 * REDUCER_VALUE =  (<friend_1> <friend_2> ... <friend_N>);
 * foreach friend in (<friend_1> <friend_2> ... <friend_N>)  {
 * REDUCER_KEY = buildSortedKey(person, friend);
 * emit(REDUCER_KEY, REDUCER_VALUE);
 * }
 * }
 *
 * @author Mahmoud Parsian
 */
public class CommonFriendsMapper
        extends Mapper<LongWritable, Text, Text, Text> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommonFriendsMapper.class);

    private static final Text REDUCER_KEY = new Text();
    private static final Text REDUCER_VALUE = new Text();

    static String getFriends(String[] tokens) {
        if (tokens.length == 2) {
            return "";
        }
        StringBuilder builder = new StringBuilder();
        for (int i = 1; i < tokens.length; i++) {
            builder.append(tokens[i]);
            if (i < (tokens.length - 1)) {
                builder.append(",");
            }
        }
        return builder.toString();
    }

    static String buildSortedKey(String person, String friend) {
        long p = Long.parseLong(person);
        long f = Long.parseLong(friend);
        if (p < f) {
            return person + "," + friend;
        } else {
            return friend + "," + person;
        }
    }

    public void map(LongWritable key, Text value, Context context)
            throws IOException, InterruptedException {
        LOGGER.info("line:{}", value.toString());
        // parse input, delimiter is a single space
        String[] tokens = StringUtils.split(value.toString(), " ");

        // create reducer value
        String friends = getFriends(tokens);
        REDUCER_VALUE.set(friends);

        String person = tokens[0];
        for (int i = 1; i < tokens.length; i++) {
            String friend = tokens[i];
            String reducerKeyAsString = buildSortedKey(person, friend);
            REDUCER_KEY.set(reducerKeyAsString);
            context.write(REDUCER_KEY, REDUCER_VALUE);
            LOGGER.info("({}),{}", REDUCER_KEY.toString(), REDUCER_VALUE.toString());
        }
    }

}
